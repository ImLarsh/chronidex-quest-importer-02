import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Sword, Shield, Heart, Zap, Search, RotateCcw, Play, AlertCircle } from "lucide-react";
import { usePokemon } from "@/hooks/usePokemon";

interface BattlePokemon {
  id: number;
  name: string;
  level: number;
  currentHP: number;
  maxHP: number;
  types: string[];
  stats: {
    attack: number;
    defense: number;
    specialAttack: number;
    specialDefense: number;
    speed: number;
  };
  moves: Move[];
  statusConditions: string[];
}

interface Move {
  name: string;
  type: string;
  category: 'physical' | 'special' | 'status';
  power: number;
  accuracy: number;
  pp: number;
  currentPP: number;
  description: string;
}

interface BattleLog {
  turn: number;
  message: string;
  type: 'damage' | 'status' | 'info' | 'critical';
}

const SAMPLE_MOVES: Move[] = [
  { name: "Thunderbolt", type: "electric", category: "special", power: 90, accuracy: 100, pp: 15, currentPP: 15, description: "A strong electric blast that may paralyze the target." },
  { name: "Flamethrower", type: "fire", category: "special", power: 90, accuracy: 100, pp: 15, currentPP: 15, description: "The target is scorched with an intense blast of fire." },
  { name: "Ice Beam", type: "ice", category: "special", power: 90, accuracy: 100, pp: 10, currentPP: 10, description: "The target is struck with an icy-cold beam of energy." },
  { name: "Earthquake", type: "ground", category: "physical", power: 100, accuracy: 100, pp: 10, currentPP: 10, description: "The user sets off an earthquake that strikes every PokÃ©mon around it." },
  { name: "Psychic", type: "psychic", category: "special", power: 90, accuracy: 100, pp: 10, currentPP: 10, description: "The target is hit by a strong telekinetic force." },
  { name: "Shadow Ball", type: "ghost", category: "special", power: 80, accuracy: 100, pp: 15, currentPP: 15, description: "The user hurls a shadowy blob at the target." },
  { name: "Dragon Pulse", type: "dragon", category: "special", power: 85, accuracy: 100, pp: 10, currentPP: 10, description: "The target is attacked with a shock wave generated by the user's gaping mouth." },
  { name: "Close Combat", type: "fighting", category: "physical", power: 120, accuracy: 100, pp: 5, currentPP: 5, description: "The user fights the target up close without guarding itself." },
];

const TYPE_EFFECTIVENESS: { [key: string]: { [key: string]: number } } = {
  normal: { rock: 0.5, ghost: 0, steel: 0.5 },
  fire: { fire: 0.5, water: 0.5, grass: 2, ice: 2, bug: 2, rock: 0.5, dragon: 0.5, steel: 2 },
  water: { fire: 2, water: 0.5, grass: 0.5, ground: 2, rock: 2, dragon: 0.5 },
  electric: { water: 2, electric: 0.5, grass: 0.5, ground: 0, flying: 2, dragon: 0.5 },
  grass: { fire: 0.5, water: 2, grass: 0.5, poison: 0.5, ground: 2, flying: 0.5, bug: 0.5, rock: 2, dragon: 0.5, steel: 0.5 },
  ice: { fire: 0.5, water: 0.5, grass: 2, ice: 0.5, ground: 2, flying: 2, dragon: 2, steel: 0.5 },
  fighting: { normal: 2, ice: 2, poison: 0.5, flying: 0.5, psychic: 0.5, bug: 0.5, rock: 2, ghost: 0, dark: 2, steel: 2, fairy: 0.5 },
  poison: { grass: 2, poison: 0.5, ground: 0.5, rock: 0.5, ghost: 0.5, steel: 0, fairy: 2 },
  ground: { fire: 2, electric: 2, grass: 0.5, poison: 2, flying: 0, bug: 0.5, rock: 2, steel: 2 },
  flying: { electric: 0.5, grass: 2, ice: 0.5, fighting: 2, bug: 2, rock: 0.5, steel: 0.5 },
  psychic: { fighting: 2, poison: 2, psychic: 0.5, dark: 0, steel: 0.5 },
  bug: { fire: 0.5, grass: 2, fighting: 0.5, poison: 0.5, flying: 0.5, psychic: 2, ghost: 0.5, dark: 2, steel: 0.5, fairy: 0.5 },
  rock: { fire: 2, ice: 2, fighting: 0.5, ground: 0.5, flying: 2, bug: 2, steel: 0.5 },
  ghost: { normal: 0, psychic: 2, ghost: 2, dark: 0.5 },
  dragon: { dragon: 2, steel: 0.5, fairy: 0 },
  dark: { fighting: 0.5, psychic: 2, ghost: 2, dark: 0.5, fairy: 0.5 },
  steel: { fire: 0.5, water: 0.5, electric: 0.5, ice: 2, rock: 2, steel: 0.5, fairy: 2 },
  fairy: { fire: 0.5, fighting: 2, poison: 0.5, dragon: 2, dark: 2, steel: 0.5 }
};

const BattleSimulator = () => {
  const { pokemon, loading } = usePokemon();
  const [playerPokemon, setPlayerPokemon] = useState<BattlePokemon | null>(null);
  const [opponentPokemon, setOpponentPokemon] = useState<BattlePokemon | null>(null);
  const [battleStarted, setBattleStarted] = useState(false);
  const [currentTurn, setCurrentTurn] = useState<'player' | 'opponent'>('player');
  const [battleLog, setBattleLog] = useState<BattleLog[]>([]);
  const [selectedMove, setSelectedMove] = useState<Move | null>(null);
  const [turnNumber, setTurnNumber] = useState(1);
  const [battleEnded, setBattleEnded] = useState(false);
  const [winner, setWinner] = useState<'player' | 'opponent' | null>(null);
  
  // Search states
  const [playerSearch, setPlayerSearch] = useState("");
  const [opponentSearch, setOpponentSearch] = useState("");
  const [playerSuggestions, setPlayerSuggestions] = useState<any[]>([]);
  const [opponentSuggestions, setOpponentSuggestions] = useState<any[]>([]);

  useEffect(() => {
    if (playerSearch) {
      const filtered = pokemon.filter(p => 
        p.name.toLowerCase().includes(playerSearch.toLowerCase()) ||
        p.id.toString().includes(playerSearch)
      ).slice(0, 5);
      setPlayerSuggestions(filtered);
    } else {
      setPlayerSuggestions([]);
    }
  }, [playerSearch, pokemon]);

  useEffect(() => {
    if (opponentSearch) {
      const filtered = pokemon.filter(p => 
        p.name.toLowerCase().includes(opponentSearch.toLowerCase()) ||
        p.id.toString().includes(opponentSearch)
      ).slice(0, 5);
      setOpponentSuggestions(filtered);
    } else {
      setOpponentSuggestions([]);
    }
  }, [opponentSearch, pokemon]);

  const createBattlePokemon = (pokemonData: any, level: number = 50): BattlePokemon => {
    const baseHP = Math.floor(((2 * 100 + 31 + 0) * level) / 100) + level + 10; // Using base HP of 100
    const attack = Math.floor(((2 * 80 + 31 + 0) * level) / 100) + 5;
    const defense = Math.floor(((2 * 80 + 31 + 0) * level) / 100) + 5;
    const specialAttack = Math.floor(((2 * 90 + 31 + 0) * level) / 100) + 5;
    const specialDefense = Math.floor(((2 * 80 + 31 + 0) * level) / 100) + 5;
    const speed = Math.floor(((2 * 85 + 31 + 0) * level) / 100) + 5;
    
    // Assign random moves
    const assignedMoves = SAMPLE_MOVES.sort(() => Math.random() - 0.5).slice(0, 4);
    
    return {
      id: pokemonData.id,
      name: pokemonData.name,
      level,
      currentHP: baseHP,
      maxHP: baseHP,
      types: pokemonData.types.map((t: any) => t.type.name),
      stats: { attack, defense, specialAttack, specialDefense, speed },
      moves: assignedMoves.map(move => ({ ...move, currentPP: move.pp })),
      statusConditions: []
    };
  };

  const selectPokemon = (pokemonData: any, side: 'player' | 'opponent') => {
    const battlePokemon = createBattlePokemon(pokemonData, 50);
    if (side === 'player') {
      setPlayerPokemon(battlePokemon);
      setPlayerSearch(pokemonData.name);
      setPlayerSuggestions([]);
    } else {
      setOpponentPokemon(battlePokemon);
      setOpponentSearch(pokemonData.name);
      setOpponentSuggestions([]);
    }
  };

  const calculateDamage = (attacker: BattlePokemon, defender: BattlePokemon, move: Move): number => {
    if (move.category === 'status') return 0;
    
    const attackStat = move.category === 'physical' ? attacker.stats.attack : attacker.stats.specialAttack;
    const defenseStat = move.category === 'physical' ? defender.stats.defense : defender.stats.specialDefense;
    
    // Base damage calculation
    const baseDamage = ((((2 * attacker.level / 5 + 2) * move.power * attackStat / defenseStat) / 50) + 2);
    
    // Type effectiveness
    let effectiveness = 1;
    defender.types.forEach(defType => {
      const moveTypeChart = TYPE_EFFECTIVENESS[move.type] || {};
      effectiveness *= moveTypeChart[defType] ?? 1;
    });
    
    // STAB (Same Type Attack Bonus)
    const stab = attacker.types.includes(move.type) ? 1.5 : 1;
    
    // Random factor (85-100%)
    const randomFactor = (Math.random() * 0.15) + 0.85;
    
    // Critical hit (6.25% chance)
    const criticalHit = Math.random() < 0.0625 ? 2 : 1;
    
    const finalDamage = Math.floor(baseDamage * stab * effectiveness * criticalHit * randomFactor);
    
    return Math.max(1, finalDamage);
  };

  const getEffectivenessText = (attacker: BattlePokemon, defender: BattlePokemon, move: Move): string => {
    let effectiveness = 1;
    defender.types.forEach(defType => {
      const moveTypeChart = TYPE_EFFECTIVENESS[move.type] || {};
      effectiveness *= moveTypeChart[defType] ?? 1;
    });
    
    if (effectiveness > 1) return "It's super effective!";
    if (effectiveness < 1 && effectiveness > 0) return "It's not very effective...";
    if (effectiveness === 0) return "It doesn't affect the target!";
    return "";
  };

  const addToBattleLog = (message: string, type: 'damage' | 'status' | 'info' | 'critical' = 'info') => {
    setBattleLog(prev => [...prev, { turn: turnNumber, message, type }]);
  };

  const executeMove = (attacker: BattlePokemon, defender: BattlePokemon, move: Move, isPlayer: boolean) => {
    if (move.currentPP <= 0) {
      addToBattleLog(`${attacker.name} tried to use ${move.name} but it has no PP left!`, 'info');
      return;
    }
    
    // Deduct PP
    move.currentPP -= 1;
    
    // Accuracy check
    if (Math.random() * 100 > move.accuracy) {
      addToBattleLog(`${attacker.name} used ${move.name} but it missed!`, 'info');
      return;
    }
    
    addToBattleLog(`${attacker.name} used ${move.name}!`, 'info');
    
    if (move.category !== 'status') {
      const damage = calculateDamage(attacker, defender, move);
      defender.currentHP = Math.max(0, defender.currentHP - damage);
      
      addToBattleLog(`${defender.name} takes ${damage} damage!`, 'damage');
      
      const effectiveness = getEffectivenessText(attacker, defender, move);
      if (effectiveness) {
        addToBattleLog(effectiveness, effectiveness.includes('super') ? 'critical' : 'info');
      }
      
      if (defender.currentHP <= 0) {
        addToBattleLog(`${defender.name} fainted!`, 'critical');
        setBattleEnded(true);
        setWinner(isPlayer ? 'player' : 'opponent');
      }
    }
  };

  const playerTurn = (move: Move) => {
    if (!playerPokemon || !opponentPokemon || battleEnded) return;
    
    executeMove(playerPokemon, opponentPokemon, move, true);
    setCurrentTurn('opponent');
    
    // AI opponent turn after a delay
    setTimeout(() => {
      if (opponentPokemon.currentHP > 0) {
        const availableMoves = opponentPokemon.moves.filter(m => m.currentPP > 0);
        if (availableMoves.length > 0) {
          const randomMove = availableMoves[Math.floor(Math.random() * availableMoves.length)];
          executeMove(opponentPokemon, playerPokemon, randomMove, false);
        }
        setCurrentTurn('player');
        setTurnNumber(prev => prev + 1);
      }
    }, 1500);
  };

  const startBattle = () => {
    if (!playerPokemon || !opponentPokemon) return;
    setBattleStarted(true);
    setBattleLog([]);
    setTurnNumber(1);
    setBattleEnded(false);
    setWinner(null);
    setCurrentTurn(playerPokemon.stats.speed >= opponentPokemon.stats.speed ? 'player' : 'opponent');
    addToBattleLog(`Battle started between ${playerPokemon.name} and ${opponentPokemon.name}!`, 'info');
  };

  const resetBattle = () => {
    setBattleStarted(false);
    setBattleEnded(false);
    setWinner(null);
    setCurrentTurn('player');
    setTurnNumber(1);
    setBattleLog([]);
    setSelectedMove(null);
    
    // Reset HP and PP
    if (playerPokemon) {
      playerPokemon.currentHP = playerPokemon.maxHP;
      playerPokemon.moves.forEach(move => move.currentPP = move.pp);
    }
    if (opponentPokemon) {
      opponentPokemon.currentHP = opponentPokemon.maxHP;
      opponentPokemon.moves.forEach(move => move.currentPP = move.pp);
    }
  };

  const getTypeColor = (type: string) => {
    const colors: { [key: string]: string } = {
      normal: "bg-gray-400", fire: "bg-red-500", water: "bg-blue-500", electric: "bg-yellow-400",
      grass: "bg-green-500", ice: "bg-blue-200", fighting: "bg-red-700", poison: "bg-purple-500",
      ground: "bg-yellow-600", flying: "bg-indigo-400", psychic: "bg-pink-500", bug: "bg-green-400",
      rock: "bg-yellow-800", ghost: "bg-purple-700", dragon: "bg-indigo-700", dark: "bg-gray-800",
      steel: "bg-gray-500", fairy: "bg-pink-300"
    };
    return colors[type] || "bg-gray-400";
  };

  const PokemonSearchCard = ({ 
    side, 
    search, 
    setSearch, 
    suggestions, 
    selectedPokemon 
  }: { 
    side: 'player' | 'opponent';
    search: string;
    setSearch: (value: string) => void;
    suggestions: any[];
    selectedPokemon: BattlePokemon | null;
  }) => (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          {side === 'player' ? <Sword className="h-5 w-5" /> : <Shield className="h-5 w-5" />}
          {side === 'player' ? 'Your PokÃ©mon' : 'Opponent PokÃ©mon'}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="relative">
          <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search for a PokÃ©mon..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="pl-10"
          />
          {suggestions.length > 0 && (
            <div className="absolute top-full left-0 right-0 z-10 bg-background border rounded-md mt-1 max-h-60 overflow-y-auto">
              {suggestions.map((suggestion: any) => (
                <div
                  key={suggestion.id}
                  className="p-3 hover:bg-accent cursor-pointer flex items-center gap-3"
                  onClick={() => selectPokemon(suggestion, side)}
                >
                  <img 
                    src={suggestion.sprites.front_default} 
                    alt={suggestion.name}
                    className="w-10 h-10"
                  />
                  <div>
                    <p className="font-medium capitalize">{suggestion.name}</p>
                    <p className="text-sm text-muted-foreground">#{suggestion.id}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
        
        {selectedPokemon && (
          <div className="space-y-3">
            <div className="text-center">
              <img 
                src={pokemon.find(p => p.id === selectedPokemon.id)?.sprites.other?.['official-artwork']?.front_default || 
                     pokemon.find(p => p.id === selectedPokemon.id)?.sprites.front_default}
                alt={selectedPokemon.name}
                className="w-24 h-24 mx-auto"
              />
              <h3 className="font-bold capitalize text-lg">{selectedPokemon.name}</h3>
              <p className="text-sm text-muted-foreground">Level {selectedPokemon.level}</p>
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm flex items-center gap-1">
                  <Heart className="h-4 w-4 text-red-500" />
                  HP: {selectedPokemon.currentHP}/{selectedPokemon.maxHP}
                </span>
                <span className="text-sm">
                  {Math.round((selectedPokemon.currentHP / selectedPokemon.maxHP) * 100)}%
                </span>
              </div>
              <Progress 
                value={(selectedPokemon.currentHP / selectedPokemon.maxHP) * 100} 
                className="h-2"
              />
            </div>
            
            <div>
              <p className="text-sm font-medium mb-2">Types:</p>
              <div className="flex gap-1">
                {selectedPokemon.types.map(type => (
                  <Badge key={type} className={`${getTypeColor(type)} text-white text-xs`}>
                    {type}
                  </Badge>
                ))}
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-2 text-xs">
              <div>ATK: {selectedPokemon.stats.attack}</div>
              <div>DEF: {selectedPokemon.stats.defense}</div>
              <div>SP.ATK: {selectedPokemon.stats.specialAttack}</div>
              <div>SP.DEF: {selectedPokemon.stats.specialDefense}</div>
              <div className="col-span-2">SPD: {selectedPokemon.stats.speed}</div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-4 flex items-center gap-3">
            <Sword className="h-8 w-8" />
            Battle Simulator
          </h1>
          <p className="text-muted-foreground">
            Experience realistic PokÃ©mon battles with accurate damage calculations and type effectiveness
          </p>
        </div>

        {loading ? (
          <div className="text-center">
            <p className="text-lg">Loading PokÃ©mon data...</p>
          </div>
        ) : (
          <Tabs defaultValue="setup" className="space-y-6">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="setup">Battle Setup</TabsTrigger>
              <TabsTrigger value="battle" disabled={!battleStarted}>Battle Arena</TabsTrigger>
              <TabsTrigger value="log" disabled={!battleStarted}>Battle Log</TabsTrigger>
            </TabsList>

            <TabsContent value="setup" className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <PokemonSearchCard
                  side="player"
                  search={playerSearch}
                  setSearch={setPlayerSearch}
                  suggestions={playerSuggestions}
                  selectedPokemon={playerPokemon}
                />
                <PokemonSearchCard
                  side="opponent"
                  search={opponentSearch}
                  setSearch={setOpponentSearch}
                  suggestions={opponentSuggestions}
                  selectedPokemon={opponentPokemon}
                />
              </div>
              
              <div className="text-center">
                <Button 
                  onClick={startBattle}
                  disabled={!playerPokemon || !opponentPokemon}
                  size="lg"
                  className="gap-2"
                >
                  <Play className="h-5 w-5" />
                  Start Battle
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="battle" className="space-y-6">
              {battleStarted && playerPokemon && opponentPokemon && (
                <div className="space-y-6">
                  {/* Battle Status */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center justify-between">
                        <span>Turn {turnNumber}</span>
                        <div className="flex gap-2">
                          <Button onClick={resetBattle} variant="outline" size="sm">
                            <RotateCcw className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid md:grid-cols-2 gap-6">
                        {/* Player PokÃ©mon */}
                        <div className={`p-4 rounded-lg border-2 ${currentTurn === 'player' && !battleEnded ? 'border-blue-500 bg-blue-50' : 'border-border'}`}>
                          <h3 className="font-bold text-lg capitalize mb-2">{playerPokemon.name}</h3>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span>HP: {playerPokemon.currentHP}/{playerPokemon.maxHP}</span>
                              <span>{Math.round((playerPokemon.currentHP / playerPokemon.maxHP) * 100)}%</span>
                            </div>
                            <Progress value={(playerPokemon.currentHP / playerPokemon.maxHP) * 100} />
                          </div>
                        </div>
                        
                        {/* Opponent PokÃ©mon */}
                        <div className={`p-4 rounded-lg border-2 ${currentTurn === 'opponent' && !battleEnded ? 'border-red-500 bg-red-50' : 'border-border'}`}>
                          <h3 className="font-bold text-lg capitalize mb-2">{opponentPokemon.name}</h3>
                          <div className="space-y-2">
                            <div className="flex justify-between items-center">
                              <span>HP: {opponentPokemon.currentHP}/{opponentPokemon.maxHP}</span>
                              <span>{Math.round((opponentPokemon.currentHP / opponentPokemon.maxHP) * 100)}%</span>
                            </div>
                            <Progress value={(opponentPokemon.currentHP / opponentPokemon.maxHP) * 100} />
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Battle Result */}
                  {battleEnded && (
                    <Card className="border-2 border-yellow-500 bg-yellow-50">
                      <CardContent className="text-center py-6">
                        <h2 className="text-2xl font-bold mb-2">
                          {winner === 'player' ? 'Victory!' : 'Defeat!'}
                        </h2>
                        <p className="text-lg">
                          {winner === 'player' 
                            ? `${playerPokemon.name} defeated ${opponentPokemon.name}!`
                            : `${opponentPokemon.name} defeated ${playerPokemon.name}!`
                          }
                        </p>
                      </CardContent>
                    </Card>
                  )}

                  {/* Move Selection */}
                  {currentTurn === 'player' && !battleEnded && (
                    <Card>
                      <CardHeader>
                        <CardTitle>Choose a Move</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-2 gap-3">
                          {playerPokemon.moves.map((move, index) => (
                            <Button
                              key={index}
                              variant={move.currentPP > 0 ? "outline" : "secondary"}
                              className="h-auto p-4 flex flex-col items-start gap-2"
                              onClick={() => playerTurn(move)}
                              disabled={move.currentPP <= 0}
                            >
                              <div className="flex items-center justify-between w-full">
                                <span className="font-semibold">{move.name}</span>
                                <Badge className={`${getTypeColor(move.type)} text-white text-xs`}>
                                  {move.type}
                                </Badge>
                              </div>
                              <div className="text-xs text-left w-full space-y-1">
                                <div>Power: {move.power || 'N/A'} | Accuracy: {move.accuracy}%</div>
                                <div>PP: {move.currentPP}/{move.pp}</div>
                                <div className="text-muted-foreground">{move.description}</div>
                              </div>
                            </Button>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Current Turn Indicator */}
                  {!battleEnded && (
                    <div className="text-center">
                      {currentTurn === 'player' ? (
                        <div className="flex items-center justify-center gap-2 text-blue-600">
                          <AlertCircle className="h-5 w-5" />
                          <span>Your turn - Choose a move!</span>
                        </div>
                      ) : (
                        <div className="flex items-center justify-center gap-2 text-orange-600">
                          <Zap className="h-5 w-5" />
                          <span>Opponent is thinking...</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              )}
            </TabsContent>

            <TabsContent value="log">
              <Card>
                <CardHeader>
                  <CardTitle>Battle Log</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2 max-h-96 overflow-y-auto">
                    {battleLog.map((entry, index) => (
                      <div 
                        key={index} 
                        className={`p-2 rounded text-sm ${
                          entry.type === 'damage' ? 'bg-red-100 text-red-800' :
                          entry.type === 'critical' ? 'bg-yellow-100 text-yellow-800' :
                          entry.type === 'status' ? 'bg-blue-100 text-blue-800' :
                          'bg-gray-100 text-gray-800'
                        }`}
                      >
                        <span className="font-medium">Turn {entry.turn}:</span> {entry.message}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        )}
      </div>
    </div>
  );
};

export default BattleSimulator;